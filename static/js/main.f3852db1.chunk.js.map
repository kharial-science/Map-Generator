{"version":3,"sources":["components/Chunk.js","generator/index.js","components/Map.js","components/BiomeSelector.js","lib/download.js","lib/createAvailableBiomesArray.js","index.js"],"names":["Chunk","props","className","biome","status","style","color","backgroundColor","undefined","expand","map","newMap","_","cloneDeep","x","row","y","chunk","forEach","relativeCoords","Math","random","length","slice","e","generate","size","type","availableBiomes","Array","fill","findRandomChunk","pop","concatenateMap","fix","directBiomes","coords","push","floor","nestedArrays","concatenatedArray","concat","Map","chunkArray","chunkKey","chunkComponentsArray","key","biomes","find","name","gridTemplateColumns","round","sqrt","gridTemplateRows","onClick","BiomeSelector","defaultValue","this","number","Component","download","filename","obj","document","element","createElement","setAttribute","encodeURIComponent","JSON","stringify","toPlainObject","display","body","appendChild","click","removeChild","createAvailableBiomesArray","biomeObjArray","avaiableBiomes","biomeObj","i","parseInt","App","state","mapWidth","handleMapClick","bind","handleSaveClick","handleReRenderClick","handleAddBiomeClick","handleFixMapClick","newBiomeList","setState","from","getElementsByClassName","biomeSelector","value","getElementById","console","log","biomeKey","biomeComponentArray","id","ReactDOM","render"],"mappings":"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","file":"static/js/main.f3852db1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Chunk(props) {\r\n    return (\r\n        <div \r\n            className={`chunk ${props.biome} ${props.status}`}\r\n            style={props.color ? {\r\n                backgroundColor: props.color\r\n            } : undefined}\r\n        ></div>\r\n    )\r\n}\r\n\r\nexport default Chunk","import _ from 'lodash'\r\n\r\nfunction expand(map) {\r\n    let newMap = _.cloneDeep(map)\r\n    let x = 0\r\n    for (let row of map) {\r\n        let y = 0\r\n        for (let chunk of row) {\r\n            if (chunk && chunk.status === 'expanding') {\r\n                let directChunksRelative = [[1, 0], [0, 1], [-1, 0], [0, -1]]\r\n                let diagChunksRelative = [[1, 1], [1, -1], [-1, -1], [-1, 1]]\r\n                directChunksRelative.forEach(relativeCoords => {\r\n                    if(Math.random() <= 0.75) {\r\n                        if (x + relativeCoords[0] >= 0 && x + relativeCoords[0] < map.length && y + relativeCoords[1] >= 0 && y + relativeCoords[1] < map.length) {\r\n                            if(!newMap[x + relativeCoords[0]][y + relativeCoords[1]] || !newMap[x + relativeCoords[0]][y + relativeCoords[1]].biome) {\r\n                                try {\r\n                                    newMap[x + relativeCoords[0]][y + relativeCoords[1]] = {\r\n                                        biome: map[x][y].biome.slice(),\r\n                                        status: 'expanding'\r\n                                    }\r\n                                } catch (e) {}\r\n                            }\r\n                        }\r\n                    }\r\n                    newMap[x][y].status = 'done'\r\n                })\r\n                diagChunksRelative.forEach(relativeCoords => {\r\n                    if(Math.random() <= 0.3) {\r\n                        if (x + relativeCoords[0] >= 0 && x + relativeCoords[0] < map.length && y + relativeCoords[1] >= 0 && y + relativeCoords[1] < map.length) {\r\n                            if(!newMap[x + relativeCoords[0]][y + relativeCoords[1]] || !newMap[x + relativeCoords[0]][y + relativeCoords[1]].biome) {\r\n                                try {\r\n                                    newMap[x + relativeCoords[0]][y + relativeCoords[1]] = {\r\n                                        biome: map[x][y].biome.slice(),\r\n                                        status: 'expanding'\r\n                                    }\r\n                                } catch (e) {}\r\n                            }\r\n                        }\r\n                    }\r\n                    newMap[x][y].status = 'done'\r\n                })\r\n            }\r\n            y++\r\n        }\r\n    x++\r\n    }\r\n    return newMap\r\n}\r\n\r\nfunction generate (size = 40, type='chunkArray', availableBiomes = ['ocean', 'ocean', 'ocean', 'plains', 'plains', 'plains']) {\r\n\r\n    let row = new Array(size).fill(null);\r\n    let map = new Array(size).fill(null).map(() => row.slice());\r\n\r\n    while (availableBiomes.length >= 1) {\r\n        let {x, y} = findRandomChunk(size);\r\n        map[x][y] = {\r\n            biome: availableBiomes.pop(),\r\n            status: 'expanding',\r\n        }\r\n    }\r\n\r\n    if (type === 'map') return map;\r\n    return concatenateMap(map);\r\n}\r\n\r\nfunction fix(map) {\r\n    let newMap = _.cloneDeep(map)\r\n    let x = 0\r\n    for (let row of map) {\r\n        let y = 0\r\n        for (let chunk of row) {\r\n            if(!chunk) {\r\n                let directChunksRelative = [[1, 0], [0, 1], [-1, 0], [0, -1]]\r\n                let directBiomes = []\r\n                directChunksRelative.forEach(coords => {\r\n                    try {\r\n                        if(map[x + coords[0]][y + coords[1]].biome) {\r\n                            directBiomes.push(map[x + coords[0]][y + coords[1]].biome)\r\n                        }\r\n                    } catch (e) {}  \r\n                })\r\n                if (directBiomes[0]) {\r\n                    newMap[x][y] = {\r\n                        biome: directBiomes[Math.floor(Math.random()*directBiomes.length)],\r\n                        status: 'done'\r\n                    }\r\n                }\r\n            }\r\n            y++\r\n        }\r\n        x++\r\n    }\r\n\r\n    return newMap\r\n}\r\n\r\nfunction isNullChunkInMap(map) {\r\n    for (let row of map) {\r\n        for(let chunk of row) {\r\n            if (!chunk) {\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction findRandomChunk(size) {\r\n    const x = Math.floor(Math.random() * size)\r\n    const y = Math.floor(Math.random() * size)\r\n    return {x, y}\r\n}\r\n\r\nfunction concatenateMap(nestedArrays) {\r\n    let concatenatedArray = []\r\n    concatenatedArray = concatenatedArray.concat(...nestedArrays)\r\n    return concatenatedArray\r\n}\r\n\r\n//const chunkArray = ['ocean', 'ocean', 'plains', 'plains']\r\nexport { concatenateMap, generate, expand, fix }\r\n\r\n","import React from 'react'\r\n\r\nimport Chunk from './Chunk'\r\n\r\nimport { concatenateMap } from '../generator'\r\n\r\nfunction Map(props) {\r\n    let chunkArray = concatenateMap(props.map)\r\n    let chunkKey = -1\r\n    let chunkComponentsArray = chunkArray.map(chunk => {\r\n        chunkKey++\r\n        return <Chunk key={chunkKey} biome={chunk ? chunk.biome : null} color={chunk ? props.biomes.find(biome => biome.name === chunk.biome).color : null} status={chunk ? chunk.status : null} />\r\n    })\r\n    return (\r\n        <div className='map-container'>\r\n            <div \r\n                className='map' \r\n                style={{\r\n                    gridTemplateColumns: `repeat(${Math.round(Math.sqrt(chunkArray.length))}, 1fr)`,\r\n                    gridTemplateRows: `repeat(${Math.round(Math.sqrt(chunkArray.length))}, 1fr)`,\r\n                }}\r\n                onClick={() => props.onClick()}\r\n            >\r\n\r\n                {chunkComponentsArray}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Map;","import React, { Component } from 'react'\r\n\r\nclass BiomeSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='biome-selector'>\r\n\r\n                <div className='label-container'>\r\n                    <label>\r\n                        Nom du biome\r\n                        <input className='biome-name-input' type='text' defaultValue={this.props.name}></input>\r\n                    </label>\r\n                </div>\r\n                \r\n                <div className='label-container'>\r\n                    <label>\r\n                        Couleur du biome\r\n                        <input className='biome-color-input' type='color' defaultValue={this.props.color}></input>\r\n                    </label>\r\n                </div>\r\n                \r\n                <div className='label-container'>\r\n                    <label>\r\n                        Nombre\r\n                        <input className='biome-number-input' type='number' defaultValue={this.props.number}></input>\r\n                    </label>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BiomeSelector","import _ from 'lodash'\r\n\r\nfunction download(filename, obj, document) {\r\n    var element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(_.toPlainObject(obj), null, '  ')));\r\n    element.setAttribute('download', `${filename}.json`);\r\n\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n\r\n    element.click();\r\n\r\n    document.body.removeChild(element);\r\n}\r\n\r\nexport default download","function createAvailableBiomesArray(biomeObjArray) {\r\n    let avaiableBiomes = []\r\n    biomeObjArray.forEach(biomeObj => {\r\n        for (let i = 0; i < parseInt(biomeObj.number, 10); i++) {\r\n            avaiableBiomes.push(biomeObj.name)\r\n        }\r\n    })\r\n    return avaiableBiomes\r\n}\r\n\r\nexport default createAvailableBiomesArray","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport Map from './components/Map'\r\nimport BiomeSelector from './components/BiomeSelector'\r\n\r\nimport { generate, expand, fix } from './generator'\r\nimport download from './lib/download.js'\r\nimport createAvailableBiomesArray from './lib/createAvailableBiomesArray.js'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            mapWidth: 40,\r\n            map: generate(this.mapWidth, 'map'),\r\n            biomes: [{name: 'ocean', color: '#add8e6', number: 3}, {name: 'plains', color: '#90ee90', number: 2}]\r\n        }\r\n\r\n        this.handleMapClick = this.handleMapClick.bind(this)\r\n        this.handleSaveClick = this.handleSaveClick.bind(this)\r\n        this.handleReRenderClick = this.handleReRenderClick.bind(this)\r\n        this.handleAddBiomeClick = this.handleAddBiomeClick.bind(this)\r\n        this.handleFixMapClick = this.handleFixMapClick.bind(this)\r\n    }\r\n\r\n    handleAddBiomeClick() {\r\n        let newBiomeList = [...this.state.biomes]\r\n        newBiomeList.push({name: 'nom', color: 'couleur', number: 0})\r\n        this.setState({biomes: newBiomeList})\r\n    }\r\n\r\n    handleMapClick() {\r\n        this.setState({map: expand(this.state.map)})\r\n    }\r\n\r\n    handleFixMapClick() {\r\n        this.setState({map: fix(this.state.map)})\r\n    }\r\n\r\n    handleSaveClick() {\r\n        download(`Map (${this.state.mapWidth})`, this.state.map, document)\r\n    }\r\n\r\n    handleReRenderClick() {\r\n\r\n        let newBiomeList = []\r\n        Array.from(document.getElementsByClassName('biome-selector')).forEach(biomeSelector => {\r\n            newBiomeList.push({\r\n                name: biomeSelector.getElementsByClassName('biome-name-input')[0].value,\r\n                color: biomeSelector.getElementsByClassName('biome-color-input')[0].value,\r\n                number: biomeSelector.getElementsByClassName('biome-number-input')[0].value,\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            mapWidth: parseInt(document.getElementById('map-dimensions').value, 10),\r\n            biomes: newBiomeList,\r\n        }, \r\n        () => {\r\n            console.log()\r\n            this.setState({\r\n                map: generate(this.state.mapWidth, 'map', createAvailableBiomesArray(this.state.biomes))\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let biomeKey = -1\r\n        let biomeComponentArray = Array.from(this.state.biomes).map(biome => {\r\n            biomeKey++\r\n            return <BiomeSelector key={biomeKey} name={biome.name} color={biome.color} number={biome.number} />\r\n        })\r\n\r\n        return (\r\n            <div className='main-grid'>\r\n\r\n                <div className='header'>\r\n                    <h1>Hello World !</h1>\r\n                    <p>Here is the kfs prototype to map generation</p>\r\n                </div>\r\n\r\n                <Map \r\n                    map={this.state.map}\r\n                    biomes={this.state.biomes}\r\n                    onClick={() => this.handleMapClick()}\r\n                />\r\n\r\n                <div className='map-infos'>\r\n\r\n                    <div className='label-container'>\r\n                        <label className='map-dimensions-label'>\r\n                            Dimension\r\n                            <input id='map-dimensions' type=\"number\" defaultValue={this.state.mapWidth}/*value={this.state.mapWidth} onChange={this.handleMapWidthChange}*/ />\r\n                        </label>\r\n                    </div>\r\n                    \r\n                    <div className='button-container'>\r\n                        <button className='fixMapButton' onClick={this.handleFixMapClick}>fix map</button>\r\n                    </div>\r\n\r\n                    <div className='button-container'>\r\n                        <button className='saveButton' onClick={this.handleSaveClick}>save</button>\r\n                    </div>\r\n\r\n                    <div className='button-container'>\r\n                        <button className='reRenderButton' onClick={this.handleReRenderClick}>re-render</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n                <div className='map-biomes'>\r\n                    {biomeComponentArray}\r\n                    <div className='button-container'>\r\n                        <button onClick={this.handleAddBiomeClick}>Ajouter un biome</button>\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}