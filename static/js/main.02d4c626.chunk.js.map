{"version":3,"sources":["components/Chunk.js","generator/index.js","components/Map.js","components/BiomeSelector.js","lib/download.js","lib/createAvailableBiomesArray.js","index.js"],"names":["Chunk","props","className","biome","status","style","color","backgroundColor","undefined","expand","map","newMap","_","cloneDeep","x","row","y","chunk","forEach","relativeCoords","Math","random","length","slice","e","generate","size","type","availableBiomes","Array","fill","findRandomChunk","pop","concatenateMap","fix","directBiomes","coords","push","floor","nestedArrays","concatenatedArray","concat","Map","chunkArray","chunkKey","chunkComponentsArray","key","biomes","find","name","gridTemplateColumns","round","sqrt","gridTemplateRows","onClick","BiomeSelector","defaultValue","this","number","Component","download","filename","obj","document","element","createElement","setAttribute","encodeURIComponent","JSON","stringify","toPlainObject","display","body","appendChild","click","removeChild","createAvailableBiomesArray","biomeObjArray","avaiableBiomes","biomeObj","i","parseInt","App","state","mapWidth","handleMapClick","bind","handleSaveClick","handleReRenderClick","handleAddBiomeClick","handleFixMapClick","newBiomeList","setState","from","getElementsByClassName","biomeSelector","value","getElementById","console","log","biomeKey","biomeComponentArray","id","ReactDOM","render"],"mappings":"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","file":"static/js/main.02d4c626.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Chunk (props) {\r\n  return (\r\n    <div\r\n      className={`chunk ${props.biome} ${props.status}`}\r\n      style={props.color ? {\r\n        backgroundColor: props.color\r\n      } : undefined}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Chunk\r\n","import _ from 'lodash'\r\n\r\nfunction expand (map) {\r\n  const newMap = _.cloneDeep(map)\r\n  let x = 0\r\n  for (const row of map) {\r\n    let y = 0\r\n    for (const chunk of row) {\r\n      if (chunk && chunk.status === 'expanding') {\r\n        const directChunksRelative = [[1, 0], [0, 1], [-1, 0], [0, -1]]\r\n        const diagChunksRelative = [[1, 1], [1, -1], [-1, -1], [-1, 1]]\r\n        directChunksRelative.forEach(relativeCoords => {\r\n          if (Math.random() <= 0.75) {\r\n            if (x + relativeCoords[0] >= 0 && x + relativeCoords[0] < map.length && y + relativeCoords[1] >= 0 && y + relativeCoords[1] < map.length) {\r\n              if (!newMap[x + relativeCoords[0]][y + relativeCoords[1]] || !newMap[x + relativeCoords[0]][y + relativeCoords[1]].biome) {\r\n                try {\r\n                  newMap[x + relativeCoords[0]][y + relativeCoords[1]] = {\r\n                    biome: map[x][y].biome.slice(),\r\n                    status: 'expanding'\r\n                  }\r\n                } catch (e) {}\r\n              }\r\n            }\r\n          }\r\n          newMap[x][y].status = 'done'\r\n        })\r\n        diagChunksRelative.forEach(relativeCoords => {\r\n          if (Math.random() <= 0.3) {\r\n            if (x + relativeCoords[0] >= 0 && x + relativeCoords[0] < map.length && y + relativeCoords[1] >= 0 && y + relativeCoords[1] < map.length) {\r\n              if (!newMap[x + relativeCoords[0]][y + relativeCoords[1]] || !newMap[x + relativeCoords[0]][y + relativeCoords[1]].biome) {\r\n                try {\r\n                  newMap[x + relativeCoords[0]][y + relativeCoords[1]] = {\r\n                    biome: map[x][y].biome.slice(),\r\n                    status: 'expanding'\r\n                  }\r\n                } catch (e) {}\r\n              }\r\n            }\r\n          }\r\n          newMap[x][y].status = 'done'\r\n        })\r\n      }\r\n      y++\r\n    }\r\n    x++\r\n  }\r\n  return newMap\r\n}\r\n\r\nfunction generate (size = 40, type = 'chunkArray', availableBiomes = ['ocean', 'ocean', 'ocean', 'plains', 'plains', 'plains']) {\r\n  const row = new Array(size).fill(null)\r\n  const map = new Array(size).fill(null).map(() => row.slice())\r\n\r\n  while (availableBiomes.length >= 1) {\r\n    const { x, y } = findRandomChunk(size)\r\n    map[x][y] = {\r\n      biome: availableBiomes.pop(),\r\n      status: 'expanding'\r\n    }\r\n  }\r\n\r\n  if (type === 'map') return map\r\n  return concatenateMap(map)\r\n}\r\n\r\nfunction fix (map) {\r\n  const newMap = _.cloneDeep(map)\r\n  let x = 0\r\n  for (const row of map) {\r\n    let y = 0\r\n    for (const chunk of row) {\r\n      if (!chunk) {\r\n        const directChunksRelative = [[1, 0], [0, 1], [-1, 0], [0, -1]]\r\n        const directBiomes = []\r\n        directChunksRelative.forEach(coords => {\r\n          try {\r\n            if (map[x + coords[0]][y + coords[1]].biome) {\r\n              directBiomes.push(map[x + coords[0]][y + coords[1]].biome)\r\n            }\r\n          } catch (e) {}\r\n        })\r\n        if (directBiomes[0]) {\r\n          newMap[x][y] = {\r\n            biome: directBiomes[Math.floor(Math.random() * directBiomes.length)],\r\n            status: 'done'\r\n          }\r\n        }\r\n      }\r\n      y++\r\n    }\r\n    x++\r\n  }\r\n\r\n  return newMap\r\n}\r\n\r\nfunction isNullChunkInMap (map) {\r\n  for (const row of map) {\r\n    for (const chunk of row) {\r\n      if (!chunk) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction findRandomChunk (size) {\r\n  const x = Math.floor(Math.random() * size)\r\n  const y = Math.floor(Math.random() * size)\r\n  return { x, y }\r\n}\r\n\r\nfunction concatenateMap (nestedArrays) {\r\n  let concatenatedArray = []\r\n  concatenatedArray = concatenatedArray.concat(...nestedArrays)\r\n  return concatenatedArray\r\n}\r\n\r\n// const chunkArray = ['ocean', 'ocean', 'plains', 'plains']\r\nexport { concatenateMap, generate, expand, fix }\r\n","import React from 'react'\r\n\r\nimport Chunk from './Chunk'\r\n\r\nimport { concatenateMap } from '../generator'\r\n\r\nfunction Map (props) {\r\n  const chunkArray = concatenateMap(props.map)\r\n  let chunkKey = -1\r\n  const chunkComponentsArray = chunkArray.map(chunk => {\r\n    chunkKey++\r\n    return <Chunk key={chunkKey} biome={chunk ? chunk.biome : null} color={chunk ? props.biomes.find(biome => biome.name === chunk.biome).color : null} status={chunk ? chunk.status : null} />\r\n  })\r\n  return (\r\n    <div className='map-container'>\r\n      <div\r\n        className='map'\r\n        style={{\r\n          gridTemplateColumns: `repeat(${Math.round(Math.sqrt(chunkArray.length))}, 1fr)`,\r\n          gridTemplateRows: `repeat(${Math.round(Math.sqrt(chunkArray.length))}, 1fr)`\r\n        }}\r\n        onClick={() => props.onClick()}\r\n      >\r\n\r\n        {chunkComponentsArray}\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","import React, { Component } from 'react'\r\n\r\nclass BiomeSelector extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='biome-selector'>\r\n\r\n        <div className='label-container'>\r\n          <label>\r\n                        Nom du biome\r\n            <input className='biome-name-input' type='text' defaultValue={this.props.name} />\r\n          </label>\r\n        </div>\r\n\r\n        <div className='label-container'>\r\n          <label>\r\n                        Couleur du biome\r\n            <input className='biome-color-input' type='color' defaultValue={this.props.color} />\r\n          </label>\r\n        </div>\r\n\r\n        <div className='label-container'>\r\n          <label>\r\n                        Nombre\r\n            <input className='biome-number-input' type='number' defaultValue={this.props.number} />\r\n          </label>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BiomeSelector\r\n","import _ from 'lodash'\r\n\r\nfunction download (filename, obj, document) {\r\n  var element = document.createElement('a')\r\n  element.setAttribute('href', 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(_.toPlainObject(obj), null, '  ')))\r\n  element.setAttribute('download', `${filename}.json`)\r\n\r\n  element.style.display = 'none'\r\n  document.body.appendChild(element)\r\n\r\n  element.click()\r\n\r\n  document.body.removeChild(element)\r\n}\r\n\r\nexport default download\r\n","function createAvailableBiomesArray (biomeObjArray) {\r\n  const avaiableBiomes = []\r\n  biomeObjArray.forEach(biomeObj => {\r\n    for (let i = 0; i < parseInt(biomeObj.number, 10); i++) {\r\n      avaiableBiomes.push(biomeObj.name)\r\n    }\r\n  })\r\n  return avaiableBiomes\r\n}\r\n\r\nexport default createAvailableBiomesArray\r\n","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n\r\nimport Map from './components/Map'\r\nimport BiomeSelector from './components/BiomeSelector'\r\n\r\nimport { generate, expand, fix } from './generator'\r\nimport download from './lib/download.js'\r\nimport createAvailableBiomesArray from './lib/createAvailableBiomesArray.js'\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      mapWidth: 40,\r\n      map: generate(this.mapWidth, 'map'),\r\n      biomes: [{ name: 'ocean', color: '#add8e6', number: 3 }, { name: 'plains', color: '#90ee90', number: 2 }]\r\n    }\r\n\r\n    this.handleMapClick = this.handleMapClick.bind(this)\r\n    this.handleSaveClick = this.handleSaveClick.bind(this)\r\n    this.handleReRenderClick = this.handleReRenderClick.bind(this)\r\n    this.handleAddBiomeClick = this.handleAddBiomeClick.bind(this)\r\n    this.handleFixMapClick = this.handleFixMapClick.bind(this)\r\n  }\r\n\r\n  handleAddBiomeClick () {\r\n    const newBiomeList = [...this.state.biomes]\r\n    newBiomeList.push({ name: 'nom', color: 'couleur', number: 0 })\r\n    this.setState({ biomes: newBiomeList })\r\n  }\r\n\r\n  handleMapClick () {\r\n    this.setState({ map: expand(this.state.map) })\r\n  }\r\n\r\n  handleFixMapClick () {\r\n    this.setState({ map: fix(this.state.map) })\r\n  }\r\n\r\n  handleSaveClick () {\r\n    download(`Map (${this.state.mapWidth})`, this.state.map, document)\r\n  }\r\n\r\n  handleReRenderClick () {\r\n    const newBiomeList = []\r\n    Array.from(document.getElementsByClassName('biome-selector')).forEach(biomeSelector => {\r\n      newBiomeList.push({\r\n        name: biomeSelector.getElementsByClassName('biome-name-input')[0].value,\r\n        color: biomeSelector.getElementsByClassName('biome-color-input')[0].value,\r\n        number: biomeSelector.getElementsByClassName('biome-number-input')[0].value\r\n      })\r\n    })\r\n\r\n    this.setState({\r\n      mapWidth: parseInt(document.getElementById('map-dimensions').value, 10),\r\n      biomes: newBiomeList\r\n    },\r\n    () => {\r\n      console.log()\r\n      this.setState({\r\n        map: generate(this.state.mapWidth, 'map', createAvailableBiomesArray(this.state.biomes))\r\n      })\r\n    })\r\n  }\r\n\r\n  render () {\r\n    let biomeKey = -1\r\n    const biomeComponentArray = Array.from(this.state.biomes).map(biome => {\r\n      biomeKey++\r\n      return <BiomeSelector key={biomeKey} name={biome.name} color={biome.color} number={biome.number} />\r\n    })\r\n\r\n    return (\r\n      <div className='main-grid'>\r\n\r\n        <div className='header'>\r\n          <h1>Map Generator</h1>\r\n          <p>Kharoh Family Science Map Generator prototype, later usage in generating Kharoh Families' maps</p>\r\n        </div>\r\n\r\n        <Map\r\n          map={this.state.map}\r\n          biomes={this.state.biomes}\r\n          onClick={() => this.handleMapClick()}\r\n        />\r\n\r\n        <div className='map-infos'>\r\n\r\n          <div className='label-container'>\r\n            <label className='map-dimensions-label'>\r\n                            Dimension\r\n              <input id='map-dimensions' type='number' defaultValue={this.state.mapWidth}/* value={this.state.mapWidth} onChange={this.handleMapWidthChange} */ />\r\n            </label>\r\n          </div>\r\n\r\n          <div className='button-container'>\r\n            <button className='fixMapButton' onClick={this.handleFixMapClick}>fix map</button>\r\n          </div>\r\n\r\n          <div className='button-container'>\r\n            <button className='saveButton' onClick={this.handleSaveClick}>save</button>\r\n          </div>\r\n\r\n          <div className='button-container'>\r\n            <button className='reRenderButton' onClick={this.handleReRenderClick}>re-render</button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className='map-biomes'>\r\n          {biomeComponentArray}\r\n          <div className='button-container'>\r\n            <button onClick={this.handleAddBiomeClick}>Ajouter un biome</button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}